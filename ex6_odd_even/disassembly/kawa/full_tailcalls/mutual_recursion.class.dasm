Classfile /Users/tuuli/school/thesis_examples/ex3_mutual_recursion/temp$_39916801/mutual_recursion.class
  Last modified Feb 29, 2016; size 4153 bytes
  MD5 checksum 75ba0b1b732c75c3988f90a473749efe
  Compiled from "mutual_recursion.scm"
public class mutual_recursion extends gnu.expr.ModuleBody implements java.lang.Runnable,gnu.expr.RunnableModule
  minor version: 0
  major version: 51
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
    #1 = Utf8               mutual_recursion
    #2 = Class              #1            // mutual_recursion
    #3 = Utf8               gnu/mapping/CallContext
    #4 = Class              #3            // gnu/mapping/CallContext
    #5 = Utf8               consumer
    #6 = Utf8               Lgnu/lists/Consumer;
    #7 = NameAndType        #5:#6         // consumer:Lgnu/lists/Consumer;
    #8 = Fieldref           #4.#7         // gnu/mapping/CallContext.consumer:Lgnu/lists/Consumer;
    #9 = Utf8               java/lang/Object
   #10 = Class              #9            // java/lang/Object
   #11 = Utf8               java/lang/Number
   #12 = Class              #11           // java/lang/Number
   #13 = Utf8               gnu/mapping/Promise
   #14 = Class              #13           // gnu/mapping/Promise
   #15 = Utf8               force
   #16 = Utf8               (Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
   #17 = NameAndType        #15:#16       // force:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
   #18 = Methodref          #14.#17       // gnu/mapping/Promise.force:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
   #19 = Utf8               java/lang/ClassCastException
   #20 = Class              #19           // java/lang/ClassCastException
   #21 = Utf8               gnu/mapping/WrongType
   #22 = Class              #21           // gnu/mapping/WrongType
   #23 = Utf8               zero?
   #24 = String             #23           // zero?
   #25 = Utf8               <init>
   #26 = Utf8               (Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
   #27 = NameAndType        #25:#26       // "<init>":(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
   #28 = Methodref          #22.#27       // gnu/mapping/WrongType."<init>":(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
   #29 = Utf8               kawa/lib/numbers
   #30 = Class              #29           // kawa/lib/numbers
   #31 = Utf8               isZero
   #32 = Utf8               (Ljava/lang/Number;)Z
   #33 = NameAndType        #31:#32       // isZero:(Ljava/lang/Number;)Z
   #34 = Methodref          #30.#33       // kawa/lib/numbers.isZero:(Ljava/lang/Number;)Z
   #35 = Utf8               java/lang/Boolean
   #36 = Class              #35           // java/lang/Boolean
   #37 = Utf8               FALSE
   #38 = Utf8               Ljava/lang/Boolean;
   #39 = NameAndType        #37:#38       // FALSE:Ljava/lang/Boolean;
   #40 = Fieldref           #36.#39       // java/lang/Boolean.FALSE:Ljava/lang/Boolean;
   #41 = Utf8               gnu/mapping/Values
   #42 = Class              #41           // gnu/mapping/Values
   #43 = Utf8               writeValues
   #44 = Utf8               (Ljava/lang/Object;Lgnu/lists/Consumer;)V
   #45 = NameAndType        #43:#44       // writeValues:(Ljava/lang/Object;Lgnu/lists/Consumer;)V
   #46 = Methodref          #42.#45       // gnu/mapping/Values.writeValues:(Ljava/lang/Object;Lgnu/lists/Consumer;)V
   #47 = Utf8               even$Qu
   #48 = Utf8               Lgnu/expr/ModuleMethod;
   #49 = NameAndType        #47:#48       // even$Qu:Lgnu/expr/ModuleMethod;
   #50 = Fieldref           #2.#49        // mutual_recursion.even$Qu:Lgnu/expr/ModuleMethod;
   #51 = Utf8               gnu/kawa/functions/AddOp
   #52 = Class              #51           // gnu/kawa/functions/AddOp
   #53 = Utf8               $Mn
   #54 = Utf8               Lgnu/kawa/functions/AddOp;
   #55 = NameAndType        #53:#54       // $Mn:Lgnu/kawa/functions/AddOp;
   #56 = Fieldref           #52.#55       // gnu/kawa/functions/AddOp.$Mn:Lgnu/kawa/functions/AddOp;
   #57 = Utf8               Lit0
   #58 = Utf8               Lgnu/math/IntNum;
   #59 = NameAndType        #57:#58       // Lit0:Lgnu/math/IntNum;
   #60 = Fieldref           #2.#59        // mutual_recursion.Lit0:Lgnu/math/IntNum;
   #61 = Utf8               gnu/mapping/Procedure
   #62 = Class              #61           // gnu/mapping/Procedure
   #63 = Utf8               apply2
   #64 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   #65 = NameAndType        #63:#64       // apply2:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   #66 = Methodref          #62.#65       // gnu/mapping/Procedure.apply2:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   #67 = Utf8               check1
   #68 = Utf8               (Ljava/lang/Object;Lgnu/mapping/CallContext;)V
   #69 = NameAndType        #67:#68       // check1:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
   #70 = Methodref          #62.#69       // gnu/mapping/Procedure.check1:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
   #71 = Utf8               TRUE
   #72 = NameAndType        #71:#38       // TRUE:Ljava/lang/Boolean;
   #73 = Fieldref           #36.#72       // java/lang/Boolean.TRUE:Ljava/lang/Boolean;
   #74 = Utf8               odd$Qu
   #75 = NameAndType        #74:#48       // odd$Qu:Lgnu/expr/ModuleMethod;
   #76 = Fieldref           #2.#75        // mutual_recursion.odd$Qu:Lgnu/expr/ModuleMethod;
   #77 = Utf8               Lit1
   #78 = NameAndType        #77:#58       // Lit1:Lgnu/math/IntNum;
   #79 = Fieldref           #2.#78        // mutual_recursion.Lit1:Lgnu/math/IntNum;
   #80 = Utf8               startFromContext
   #81 = Utf8               ()I
   #82 = NameAndType        #80:#81       // startFromContext:()I
   #83 = Methodref          #4.#82        // gnu/mapping/CallContext.startFromContext:()I
   #84 = Utf8               isOdd$X
   #85 = NameAndType        #84:#68       // isOdd$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
   #86 = Methodref          #2.#85        // mutual_recursion.isOdd$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
   #87 = Utf8               cleanupFromContext
   #88 = Utf8               (I)V
   #89 = NameAndType        #87:#88       // cleanupFromContext:(I)V
   #90 = Methodref          #4.#89        // gnu/mapping/CallContext.cleanupFromContext:(I)V
   #91 = Utf8               getFromContext
   #92 = Utf8               (I)Ljava/lang/Object;
   #93 = NameAndType        #91:#92       // getFromContext:(I)Ljava/lang/Object;
   #94 = Methodref          #4.#93        // gnu/mapping/CallContext.getFromContext:(I)Ljava/lang/Object;
   #95 = Utf8               kawa/lib/ports
   #96 = Class              #95           // kawa/lib/ports
   #97 = Utf8               display
   #98 = Utf8               (Ljava/lang/Object;)V
   #99 = NameAndType        #97:#98       // display:(Ljava/lang/Object;)V
  #100 = Methodref          #96.#99       // kawa/lib/ports.display:(Ljava/lang/Object;)V
  #101 = Utf8               isEven$X
  #102 = NameAndType        #101:#68      // isEven$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
  #103 = Methodref          #2.#102       // mutual_recursion.isEven$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
  #104 = Utf8               Lit2
  #105 = NameAndType        #104:#58      // Lit2:Lgnu/math/IntNum;
  #106 = Fieldref           #2.#105       // mutual_recursion.Lit2:Lgnu/math/IntNum;
  #107 = Utf8               Lit3
  #108 = NameAndType        #107:#58      // Lit3:Lgnu/math/IntNum;
  #109 = Fieldref           #2.#108       // mutual_recursion.Lit3:Lgnu/math/IntNum;
  #110 = Utf8               kawa/standard/Scheme
  #111 = Class              #110          // kawa/standard/Scheme
  #112 = Utf8               registerEnvironment
  #113 = Utf8               ()V
  #114 = NameAndType        #112:#113     // registerEnvironment:()V
  #115 = Methodref          #111.#114     // kawa/standard/Scheme.registerEnvironment:()V
  #116 = Utf8               gnu/expr/ModuleBody
  #117 = Class              #116          // gnu/expr/ModuleBody
  #118 = NameAndType        #25:#113      // "<init>":()V
  #119 = Methodref          #117.#118     // gnu/expr/ModuleBody."<init>":()V
  #120 = Utf8               gnu/expr/ModuleInfo
  #121 = Class              #120          // gnu/expr/ModuleInfo
  #122 = Utf8               register
  #123 = NameAndType        #122:#98      // register:(Ljava/lang/Object;)V
  #124 = Methodref          #121.#123     // gnu/expr/ModuleInfo.register:(Ljava/lang/Object;)V
  #125 = Methodref          #2.#118       // mutual_recursion."<init>":()V
  #126 = Utf8               $instance
  #127 = Utf8               Lmutual_recursion;
  #128 = NameAndType        #126:#127     // $instance:Lmutual_recursion;
  #129 = Fieldref           #2.#128       // mutual_recursion.$instance:Lmutual_recursion;
  #130 = Utf8               gnu/expr/ModuleMethodWithContext
  #131 = Class              #130          // gnu/expr/ModuleMethodWithContext
  #132 = Utf8               Lit4
  #133 = Utf8               Lgnu/mapping/SimpleSymbol;
  #134 = NameAndType        #132:#133     // Lit4:Lgnu/mapping/SimpleSymbol;
  #135 = Fieldref           #2.#134       // mutual_recursion.Lit4:Lgnu/mapping/SimpleSymbol;
  #136 = Utf8               (Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
  #137 = NameAndType        #25:#136      // "<init>":(Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
  #138 = Methodref          #131.#137     // gnu/expr/ModuleMethodWithContext."<init>":(Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
  #139 = Utf8               source-location
  #140 = String             #139          // source-location
  #141 = Utf8               mutual_recursion.scm:8
  #142 = String             #141          // mutual_recursion.scm:8
  #143 = Utf8               gnu/mapping/PropertySet
  #144 = Class              #143          // gnu/mapping/PropertySet
  #145 = Utf8               setProperty
  #146 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V
  #147 = NameAndType        #145:#146     // setProperty:(Ljava/lang/Object;Ljava/lang/Object;)V
  #148 = Methodref          #144.#147     // gnu/mapping/PropertySet.setProperty:(Ljava/lang/Object;Ljava/lang/Object;)V
  #149 = Utf8               Lit5
  #150 = NameAndType        #149:#133     // Lit5:Lgnu/mapping/SimpleSymbol;
  #151 = Fieldref           #2.#150       // mutual_recursion.Lit5:Lgnu/mapping/SimpleSymbol;
  #152 = Utf8               mutual_recursion.scm:14
  #153 = String             #152          // mutual_recursion.scm:14
  #154 = Utf8               gnu/expr/ModuleMethod
  #155 = Class              #154          // gnu/expr/ModuleMethod
  #156 = Utf8               selector
  #157 = Utf8               I
  #158 = NameAndType        #156:#157     // selector:I
  #159 = Fieldref           #155.#158     // gnu/expr/ModuleMethod.selector:I
  #160 = Utf8               value1
  #161 = Utf8               Ljava/lang/Object;
  #162 = NameAndType        #160:#161     // value1:Ljava/lang/Object;
  #163 = Fieldref           #4.#162       // gnu/mapping/CallContext.value1:Ljava/lang/Object;
  #164 = Utf8               proc
  #165 = Utf8               Lgnu/mapping/Procedure;
  #166 = NameAndType        #164:#165     // proc:Lgnu/mapping/Procedure;
  #167 = Fieldref           #4.#166       // gnu/mapping/CallContext.proc:Lgnu/mapping/Procedure;
  #168 = Utf8               pc
  #169 = NameAndType        #168:#157     // pc:I
  #170 = Fieldref           #4.#169       // gnu/mapping/CallContext.pc:I
  #171 = Utf8               match1
  #172 = Utf8               (Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
  #173 = NameAndType        #171:#172     // match1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
  #174 = Methodref          #117.#173     // gnu/expr/ModuleBody.match1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
  #175 = Utf8               applyError
  #176 = NameAndType        #175:#113     // applyError:()V
  #177 = Methodref          #155.#176     // gnu/expr/ModuleMethod.applyError:()V
  #178 = Utf8               even?
  #179 = String             #178          // even?
  #180 = Utf8               gnu/mapping/Symbol
  #181 = Class              #180          // gnu/mapping/Symbol
  #182 = Utf8               valueOf
  #183 = Utf8               (Ljava/lang/String;)Lgnu/mapping/SimpleSymbol;
  #184 = NameAndType        #182:#183     // valueOf:(Ljava/lang/String;)Lgnu/mapping/SimpleSymbol;
  #185 = Methodref          #181.#184     // gnu/mapping/Symbol.valueOf:(Ljava/lang/String;)Lgnu/mapping/SimpleSymbol;
  #186 = Utf8               odd?
  #187 = String             #186          // odd?
  #188 = Integer            2147483647
  #189 = Utf8               gnu/math/IntNum
  #190 = Class              #189          // gnu/math/IntNum
  #191 = Utf8               (I)Lgnu/math/IntNum;
  #192 = NameAndType        #182:#191     // valueOf:(I)Lgnu/math/IntNum;
  #193 = Methodref          #190.#192     // gnu/math/IntNum.valueOf:(I)Lgnu/math/IntNum;
  #194 = Utf8               [Ljava/lang/String;
  #195 = Class              #194          // "[Ljava/lang/String;"
  #196 = Utf8               gnu/expr/ApplicationMainSupport
  #197 = Class              #196          // gnu/expr/ApplicationMainSupport
  #198 = Utf8               processArgs
  #199 = Utf8               ([Ljava/lang/String;)V
  #200 = NameAndType        #198:#199     // processArgs:([Ljava/lang/String;)V
  #201 = Methodref          #197.#200     // gnu/expr/ApplicationMainSupport.processArgs:([Ljava/lang/String;)V
  #202 = Utf8               runAsMain
  #203 = Utf8               (Lgnu/expr/RunnableModule;)V
  #204 = NameAndType        #202:#203     // runAsMain:(Lgnu/expr/RunnableModule;)V
  #205 = Methodref          #117.#204     // gnu/expr/ModuleBody.runAsMain:(Lgnu/expr/RunnableModule;)V
  #206 = Utf8               java/lang/Runnable
  #207 = Class              #206          // java/lang/Runnable
  #208 = Utf8               gnu/expr/RunnableModule
  #209 = Class              #208          // gnu/expr/RunnableModule
  #210 = Utf8               run
  #211 = Utf8               (Lgnu/mapping/CallContext;)V
  #212 = Utf8               gnu/lists/Consumer
  #213 = Class              #212          // gnu/lists/Consumer
  #214 = Utf8               java/lang/Throwable
  #215 = Class              #214          // java/lang/Throwable
  #216 = Utf8               Code
  #217 = Utf8               StackMapTable
  #218 = Utf8               LineNumberTable
  #219 = Utf8               LocalVariableTable
  #220 = Utf8               this
  #221 = Utf8               $ctx
  #222 = Utf8               Lgnu/mapping/CallContext;
  #223 = Utf8               $result
  #224 = Utf8               x
  #225 = Utf8               <clinit>
  #226 = Utf8               apply
  #227 = Utf8               main
  #228 = Utf8               SourceFile
  #229 = Utf8               mutual_recursion.scm
  #230 = Utf8               SourceDebugExtension
{
  static final gnu.expr.ModuleMethod odd$Qu;
    descriptor: Lgnu/expr/ModuleMethod;
    flags: ACC_STATIC, ACC_FINAL

  static final gnu.expr.ModuleMethod even$Qu;
    descriptor: Lgnu/expr/ModuleMethod;
    flags: ACC_STATIC, ACC_FINAL

  static final gnu.math.IntNum Lit0;
    descriptor: Lgnu/math/IntNum;
    flags: ACC_STATIC, ACC_FINAL

  static final gnu.math.IntNum Lit1;
    descriptor: Lgnu/math/IntNum;
    flags: ACC_STATIC, ACC_FINAL

  static final gnu.math.IntNum Lit2;
    descriptor: Lgnu/math/IntNum;
    flags: ACC_STATIC, ACC_FINAL

  static final gnu.math.IntNum Lit3;
    descriptor: Lgnu/math/IntNum;
    flags: ACC_STATIC, ACC_FINAL

  public static mutual_recursion $instance;
    descriptor: Lmutual_recursion;
    flags: ACC_PUBLIC, ACC_STATIC

  static final gnu.mapping.SimpleSymbol Lit4;
    descriptor: Lgnu/mapping/SimpleSymbol;
    flags: ACC_STATIC, ACC_FINAL

  static final gnu.mapping.SimpleSymbol Lit5;
    descriptor: Lgnu/mapping/SimpleSymbol;
    flags: ACC_STATIC, ACC_FINAL

  public final void run(gnu.mapping.CallContext);
    descriptor: (Lgnu/mapping/CallContext;)V
    flags: ACC_PUBLIC, ACC_FINAL
    Code:
      stack=3, locals=4, args_size=2
         0: aload_1
         1: getfield      #8                  // Field gnu/mapping/CallContext.consumer:Lgnu/lists/Consumer;
         4: astore_2
         5: getstatic     #79                 // Field Lit1:Lgnu/math/IntNum;
         8: aload_1
         9: aload_1
        10: invokevirtual #83                 // Method gnu/mapping/CallContext.startFromContext:()I
        13: istore_3
        14: invokestatic  #86                 // Method isOdd$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
        17: goto          26
        20: aload_1
        21: iload_3
        22: invokevirtual #90                 // Method gnu/mapping/CallContext.cleanupFromContext:(I)V
        25: athrow
        26: aload_1
        27: iload_3
        28: invokevirtual #94                 // Method gnu/mapping/CallContext.getFromContext:(I)Ljava/lang/Object;
        31: invokestatic  #100                // Method kawa/lib/ports.display:(Ljava/lang/Object;)V
        34: getstatic     #79                 // Field Lit1:Lgnu/math/IntNum;
        37: aload_1
        38: aload_1
        39: invokevirtual #83                 // Method gnu/mapping/CallContext.startFromContext:()I
        42: istore_3
        43: invokestatic  #103                // Method isEven$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
        46: goto          55
        49: aload_1
        50: iload_3
        51: invokevirtual #90                 // Method gnu/mapping/CallContext.cleanupFromContext:(I)V
        54: athrow
        55: aload_1
        56: iload_3
        57: invokevirtual #94                 // Method gnu/mapping/CallContext.getFromContext:(I)Ljava/lang/Object;
        60: invokestatic  #100                // Method kawa/lib/ports.display:(Ljava/lang/Object;)V
        63: getstatic     #106                // Field Lit2:Lgnu/math/IntNum;
        66: aload_1
        67: aload_1
        68: invokevirtual #83                 // Method gnu/mapping/CallContext.startFromContext:()I
        71: istore_3
        72: invokestatic  #86                 // Method isOdd$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
        75: goto          84
        78: aload_1
        79: iload_3
        80: invokevirtual #90                 // Method gnu/mapping/CallContext.cleanupFromContext:(I)V
        83: athrow
        84: aload_1
        85: iload_3
        86: invokevirtual #94                 // Method gnu/mapping/CallContext.getFromContext:(I)Ljava/lang/Object;
        89: invokestatic  #100                // Method kawa/lib/ports.display:(Ljava/lang/Object;)V
        92: getstatic     #106                // Field Lit2:Lgnu/math/IntNum;
        95: aload_1
        96: aload_1
        97: invokevirtual #83                 // Method gnu/mapping/CallContext.startFromContext:()I
       100: istore_3
       101: invokestatic  #103                // Method isEven$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
       104: goto          113
       107: aload_1
       108: iload_3
       109: invokevirtual #90                 // Method gnu/mapping/CallContext.cleanupFromContext:(I)V
       112: athrow
       113: aload_1
       114: iload_3
       115: invokevirtual #94                 // Method gnu/mapping/CallContext.getFromContext:(I)Ljava/lang/Object;
       118: invokestatic  #100                // Method kawa/lib/ports.display:(Ljava/lang/Object;)V
       121: getstatic     #109                // Field Lit3:Lgnu/math/IntNum;
       124: aload_1
       125: aload_1
       126: invokevirtual #83                 // Method gnu/mapping/CallContext.startFromContext:()I
       129: istore_3
       130: invokestatic  #86                 // Method isOdd$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
       133: goto          142
       136: aload_1
       137: iload_3
       138: invokevirtual #90                 // Method gnu/mapping/CallContext.cleanupFromContext:(I)V
       141: athrow
       142: aload_1
       143: iload_3
       144: invokevirtual #94                 // Method gnu/mapping/CallContext.getFromContext:(I)Ljava/lang/Object;
       147: invokestatic  #100                // Method kawa/lib/ports.display:(Ljava/lang/Object;)V
       150: return
      Exception table:
         from    to  target type
            14    20    20   any
            43    49    49   any
            72    78    78   any
           101   107   107   any
           130   136   136   any
      StackMapTable: number_of_entries = 10
        frame_type = 255 /* full_frame */
          offset_delta = 20
          locals = [ class mutual_recursion, class gnu/mapping/CallContext, class gnu/lists/Consumer, int ]
          stack = [ class java/lang/Throwable ]
        frame_type = 5 /* same */
        frame_type = 86 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 5 /* same */
        frame_type = 86 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 5 /* same */
        frame_type = 86 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 5 /* same */
        frame_type = 86 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
        frame_type = 5 /* same */
      LineNumberTable:
        line 7: 0
        line 13: 5
        line 19: 5
        line 20: 34
        line 21: 63
        line 22: 92
        line 23: 121
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0     150     0  this   Lmutual_recursion;
            0     150     1  $ctx   Lgnu/mapping/CallContext;
            0     150     2 $result   Lgnu/lists/Consumer;

  static void isOdd$X(java.lang.Object, gnu.mapping.CallContext);
    descriptor: (Ljava/lang/Object;Lgnu/mapping/CallContext;)V
    flags: ACC_STATIC
    Code:
      stack=6, locals=4, args_size=2
         0: aload_1
         1: getfield      #8                  // Field gnu/mapping/CallContext.consumer:Lgnu/lists/Consumer;
         4: astore_2
         5: aload_0
         6: ldc           #12                 // class java/lang/Number
         8: invokestatic  #18                 // Method gnu/mapping/Promise.force:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
        11: dup
        12: astore_3
        13: checkcast     #12                 // class java/lang/Number
        16: invokestatic  #34                 // Method kawa/lib/numbers.isZero:(Ljava/lang/Number;)Z
        19: ifeq          32
        22: getstatic     #40                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
        25: aload_2
        26: invokestatic  #46                 // Method gnu/mapping/Values.writeValues:(Ljava/lang/Object;Lgnu/lists/Consumer;)V
        29: goto          50
        32: getstatic     #50                 // Field even$Qu:Lgnu/expr/ModuleMethod;
        35: getstatic     #56                 // Field gnu/kawa/functions/AddOp.$Mn:Lgnu/kawa/functions/AddOp;
        38: aload_0
        39: getstatic     #60                 // Field Lit0:Lgnu/math/IntNum;
        42: invokevirtual #66                 // Method gnu/mapping/Procedure.apply2:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        45: aload_1
        46: invokevirtual #70                 // Method gnu/mapping/Procedure.check1:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
        49: return
        50: return
        51: new           #22                 // class gnu/mapping/WrongType
        54: dup_x1
        55: swap
        56: ldc           #24                 // String zero?
        58: iconst_1
        59: aload_3
        60: invokespecial #28                 // Method gnu/mapping/WrongType."<init>":(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
        63: athrow
      Exception table:
         from    to  target type
            13    16    51   Class java/lang/ClassCastException
      StackMapTable: number_of_entries = 5
        frame_type = 255 /* full_frame */
          offset_delta = 16
          locals = [ class java/lang/Object, class gnu/mapping/CallContext, class gnu/lists/Consumer ]
          stack = [ class java/lang/Number ]
        frame_type = 5 /* same */
        frame_type = 9 /* same */
        frame_type = 17 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class java/lang/Object, class gnu/mapping/CallContext, class gnu/lists/Consumer, class java/lang/Object ]
          stack = [ class java/lang/ClassCastException ]
      LineNumberTable:
        line 8: 0
        line 9: 5
        line 11: 32
        line 9: 51
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      50     0     x   Ljava/lang/Object;
            0      50     1  $ctx   Lgnu/mapping/CallContext;
            0      50     2 $result   Lgnu/lists/Consumer;

  static void isEven$X(java.lang.Object, gnu.mapping.CallContext);
    descriptor: (Ljava/lang/Object;Lgnu/mapping/CallContext;)V
    flags: ACC_STATIC
    Code:
      stack=6, locals=4, args_size=2
         0: aload_1
         1: getfield      #8                  // Field gnu/mapping/CallContext.consumer:Lgnu/lists/Consumer;
         4: astore_2
         5: aload_0
         6: ldc           #12                 // class java/lang/Number
         8: invokestatic  #18                 // Method gnu/mapping/Promise.force:(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;
        11: dup
        12: astore_3
        13: checkcast     #12                 // class java/lang/Number
        16: invokestatic  #34                 // Method kawa/lib/numbers.isZero:(Ljava/lang/Number;)Z
        19: ifeq          32
        22: getstatic     #73                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
        25: aload_2
        26: invokestatic  #46                 // Method gnu/mapping/Values.writeValues:(Ljava/lang/Object;Lgnu/lists/Consumer;)V
        29: goto          50
        32: getstatic     #76                 // Field odd$Qu:Lgnu/expr/ModuleMethod;
        35: getstatic     #56                 // Field gnu/kawa/functions/AddOp.$Mn:Lgnu/kawa/functions/AddOp;
        38: aload_0
        39: getstatic     #60                 // Field Lit0:Lgnu/math/IntNum;
        42: invokevirtual #66                 // Method gnu/mapping/Procedure.apply2:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        45: aload_1
        46: invokevirtual #70                 // Method gnu/mapping/Procedure.check1:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
        49: return
        50: return
        51: new           #22                 // class gnu/mapping/WrongType
        54: dup_x1
        55: swap
        56: ldc           #24                 // String zero?
        58: iconst_1
        59: aload_3
        60: invokespecial #28                 // Method gnu/mapping/WrongType."<init>":(Ljava/lang/ClassCastException;Ljava/lang/String;ILjava/lang/Object;)V
        63: athrow
      Exception table:
         from    to  target type
            13    16    51   Class java/lang/ClassCastException
      StackMapTable: number_of_entries = 5
        frame_type = 255 /* full_frame */
          offset_delta = 16
          locals = [ class java/lang/Object, class gnu/mapping/CallContext, class gnu/lists/Consumer ]
          stack = [ class java/lang/Number ]
        frame_type = 5 /* same */
        frame_type = 9 /* same */
        frame_type = 17 /* same */
        frame_type = 255 /* full_frame */
          offset_delta = 0
          locals = [ class java/lang/Object, class gnu/mapping/CallContext, class gnu/lists/Consumer, class java/lang/Object ]
          stack = [ class java/lang/ClassCastException ]
      LineNumberTable:
        line 14: 0
        line 15: 5
        line 17: 32
        line 15: 51
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      50     0     x   Ljava/lang/Object;
            0      50     1  $ctx   Lgnu/mapping/CallContext;
            0      50     2 $result   Lgnu/lists/Consumer;

  public static {};
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=6, locals=1, args_size=0
         0: invokestatic  #115                // Method kawa/standard/Scheme.registerEnvironment:()V
         3: ldc           #179                // String even?
         5: invokestatic  #185                // Method gnu/mapping/Symbol.valueOf:(Ljava/lang/String;)Lgnu/mapping/SimpleSymbol;
         8: putstatic     #151                // Field Lit5:Lgnu/mapping/SimpleSymbol;
        11: ldc           #187                // String odd?
        13: invokestatic  #185                // Method gnu/mapping/Symbol.valueOf:(Ljava/lang/String;)Lgnu/mapping/SimpleSymbol;
        16: putstatic     #135                // Field Lit4:Lgnu/mapping/SimpleSymbol;
        19: ldc           #188                // int 2147483647
        21: invokestatic  #193                // Method gnu/math/IntNum.valueOf:(I)Lgnu/math/IntNum;
        24: putstatic     #109                // Field Lit3:Lgnu/math/IntNum;
        27: bipush        9
        29: invokestatic  #193                // Method gnu/math/IntNum.valueOf:(I)Lgnu/math/IntNum;
        32: putstatic     #106                // Field Lit2:Lgnu/math/IntNum;
        35: bipush        10
        37: invokestatic  #193                // Method gnu/math/IntNum.valueOf:(I)Lgnu/math/IntNum;
        40: putstatic     #79                 // Field Lit1:Lgnu/math/IntNum;
        43: iconst_1
        44: invokestatic  #193                // Method gnu/math/IntNum.valueOf:(I)Lgnu/math/IntNum;
        47: putstatic     #60                 // Field Lit0:Lgnu/math/IntNum;
        50: new           #2                  // class mutual_recursion
        53: dup
        54: invokespecial #125                // Method "<init>":()V
        57: putstatic     #129                // Field $instance:Lmutual_recursion;
        60: new           #131                // class gnu/expr/ModuleMethodWithContext
        63: dup
        64: getstatic     #129                // Field $instance:Lmutual_recursion;
        67: astore_0
        68: aload_0
        69: iconst_1
        70: getstatic     #135                // Field Lit4:Lgnu/mapping/SimpleSymbol;
        73: sipush        4097
        76: invokespecial #138                // Method gnu/expr/ModuleMethodWithContext."<init>":(Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
        79: dup
        80: ldc           #140                // String source-location
        82: ldc           #142                // String mutual_recursion.scm:8
        84: invokevirtual #148                // Method gnu/mapping/PropertySet.setProperty:(Ljava/lang/Object;Ljava/lang/Object;)V
        87: putstatic     #76                 // Field odd$Qu:Lgnu/expr/ModuleMethod;
        90: new           #131                // class gnu/expr/ModuleMethodWithContext
        93: dup
        94: aload_0
        95: iconst_2
        96: getstatic     #151                // Field Lit5:Lgnu/mapping/SimpleSymbol;
        99: sipush        4097
       102: invokespecial #138                // Method gnu/expr/ModuleMethodWithContext."<init>":(Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
       105: dup
       106: ldc           #140                // String source-location
       108: ldc           #153                // String mutual_recursion.scm:14
       110: invokevirtual #148                // Method gnu/mapping/PropertySet.setProperty:(Ljava/lang/Object;Ljava/lang/Object;)V
       113: putstatic     #50                 // Field even$Qu:Lgnu/expr/ModuleMethod;
       116: return
      LocalVariableTable:
        Start  Length  Slot  Name   Signature

  public mutual_recursion();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #119                // Method gnu/expr/ModuleBody."<init>":()V
         4: aload_0
         5: invokestatic  #124                // Method gnu/expr/ModuleInfo.register:(Ljava/lang/Object;)V
         8: return

  public int match1(gnu.expr.ModuleMethod, java.lang.Object, gnu.mapping.CallContext);
    descriptor: (Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
    flags: ACC_PUBLIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_1
         1: getfield      #159                // Field gnu/expr/ModuleMethod.selector:I
         4: tableswitch   { // 1 to 2
                       1: 45
                       2: 28
                 default: 62
            }
        28: aload_3
        29: aload_2
        30: putfield      #163                // Field gnu/mapping/CallContext.value1:Ljava/lang/Object;
        33: aload_3
        34: aload_0
        35: putfield      #167                // Field gnu/mapping/CallContext.proc:Lgnu/mapping/Procedure;
        38: aload_3
        39: iconst_2
        40: putfield      #170                // Field gnu/mapping/CallContext.pc:I
        43: iconst_0
        44: ireturn
        45: aload_3
        46: aload_2
        47: putfield      #163                // Field gnu/mapping/CallContext.value1:Ljava/lang/Object;
        50: aload_3
        51: aload_0
        52: putfield      #167                // Field gnu/mapping/CallContext.proc:Lgnu/mapping/Procedure;
        55: aload_3
        56: iconst_1
        57: putfield      #170                // Field gnu/mapping/CallContext.pc:I
        60: iconst_0
        61: ireturn
        62: aload_0
        63: aload_1
        64: aload_2
        65: aload_3
        66: invokespecial #174                // Method gnu/expr/ModuleBody.match1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
        69: ireturn
      StackMapTable: number_of_entries = 4
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 23 /* same */
        frame_type = 16 /* same */
        frame_type = 16 /* same */
      LineNumberTable:
        line 14: 28
        line 8: 45

  public void apply(gnu.mapping.CallContext);
    descriptor: (Lgnu/mapping/CallContext;)V
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: getfield      #170                // Field gnu/mapping/CallContext.pc:I
         4: tableswitch   { // 1 to 2
                       1: 28
                       2: 37
                 default: 46
            }
        28: aload_1
        29: getfield      #163                // Field gnu/mapping/CallContext.value1:Ljava/lang/Object;
        32: aload_1
        33: invokestatic  #86                 // Method isOdd$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
        36: return
        37: aload_1
        38: getfield      #163                // Field gnu/mapping/CallContext.value1:Ljava/lang/Object;
        41: aload_1
        42: invokestatic  #103                // Method isEven$X:(Ljava/lang/Object;Lgnu/mapping/CallContext;)V
        45: return
        46: invokestatic  #177                // Method gnu/expr/ModuleMethod.applyError:()V
        49: return
      StackMapTable: number_of_entries = 4
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 23 /* same */
        frame_type = 8 /* same */
        frame_type = 8 /* same */
      LineNumberTable:
        line 8: 28
        line 14: 37

  public static void main(java.lang.String[]);
    descriptor: ([Ljava/lang/String;)V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokestatic  #201                // Method gnu/expr/ApplicationMainSupport.processArgs:([Ljava/lang/String;)V
         4: getstatic     #129                // Field $instance:Lmutual_recursion;
         7: invokestatic  #205                // Method gnu/expr/ModuleBody.runAsMain:(Lgnu/expr/RunnableModule;)V
        10: return
}
SourceFile: "mutual_recursion.scm"
SourceDebugExtension:
  SMAP
  mutual_recursion.scm
  Scheme
  *S Scheme
  *F
  1 mutual_recursion.scm
  *L
  7#1,17:7
  *E
