Classfile /Users/tuuli/school/thesis_examples/ex3_mutual_recursion/temp$_39916801/mutual_recursion__init.class
  Last modified Feb 29, 2016; size 3189 bytes
  MD5 checksum bf856655004ae744fa234ae8209ba342
public class mutual_recursion__init
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
    #1 = Utf8               mutual_recursion__init
    #2 = Class              #1            // mutual_recursion__init
    #3 = Utf8               java/lang/Object
    #4 = Class              #3            // java/lang/Object
    #5 = Utf8               load
    #6 = Utf8               ()V
    #7 = Utf8               const__0
    #8 = Utf8               Lclojure/lang/Var;
    #9 = NameAndType        #7:#8         // const__0:Lclojure/lang/Var;
   #10 = Fieldref           #2.#9         // mutual_recursion__init.const__0:Lclojure/lang/Var;
   #11 = Utf8               clojure/lang/Var
   #12 = Class              #11           // clojure/lang/Var
   #13 = Utf8               getRawRoot
   #14 = Utf8               ()Ljava/lang/Object;
   #15 = NameAndType        #13:#14       // getRawRoot:()Ljava/lang/Object;
   #16 = Methodref          #12.#15       // clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
   #17 = Utf8               clojure/lang/IFn
   #18 = Class              #17           // clojure/lang/IFn
   #19 = Utf8               const__1
   #20 = Utf8               Lclojure/lang/AFn;
   #21 = NameAndType        #19:#20       // const__1:Lclojure/lang/AFn;
   #22 = Fieldref           #2.#21        // mutual_recursion__init.const__1:Lclojure/lang/AFn;
   #23 = Utf8               invoke
   #24 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
   #25 = NameAndType        #23:#24       // invoke:(Ljava/lang/Object;)Ljava/lang/Object;
   #26 = InterfaceMethodref #18.#25       // clojure/lang/IFn.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
   #27 = Utf8               mutual_recursion$loading__5569__auto____5
   #28 = Class              #27           // mutual_recursion$loading__5569__auto____5
   #29 = Utf8               <init>
   #30 = NameAndType        #29:#6        // "<init>":()V
   #31 = Methodref          #28.#30       // mutual_recursion$loading__5569__auto____5."<init>":()V
   #32 = NameAndType        #23:#14       // invoke:()Ljava/lang/Object;
   #33 = InterfaceMethodref #18.#32       // clojure/lang/IFn.invoke:()Ljava/lang/Object;
   #34 = Utf8               clojure/lang/Symbol
   #35 = Class              #34           // clojure/lang/Symbol
   #36 = Utf8               const__2
   #37 = NameAndType        #36:#20       // const__2:Lclojure/lang/AFn;
   #38 = Fieldref           #2.#37        // mutual_recursion__init.const__2:Lclojure/lang/AFn;
   #39 = Utf8               equals
   #40 = Utf8               (Ljava/lang/Object;)Z
   #41 = NameAndType        #39:#40       // equals:(Ljava/lang/Object;)Z
   #42 = Methodref          #35.#41       // clojure/lang/Symbol.equals:(Ljava/lang/Object;)Z
   #43 = Utf8               mutual_recursion$fn__7
   #44 = Class              #43           // mutual_recursion$fn__7
   #45 = Methodref          #44.#30       // mutual_recursion$fn__7."<init>":()V
   #46 = Utf8               java/util/concurrent/Callable
   #47 = Class              #46           // java/util/concurrent/Callable
   #48 = Utf8               clojure/lang/LockingTransaction
   #49 = Class              #48           // clojure/lang/LockingTransaction
   #50 = Utf8               runInTransaction
   #51 = Utf8               (Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #52 = NameAndType        #50:#51       // runInTransaction:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #53 = Methodref          #49.#52       // clojure/lang/LockingTransaction.runInTransaction:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
   #54 = Utf8               const__3
   #55 = NameAndType        #54:#8        // const__3:Lclojure/lang/Var;
   #56 = Fieldref           #2.#55        // mutual_recursion__init.const__3:Lclojure/lang/Var;
   #57 = Utf8               const__10
   #58 = NameAndType        #57:#20       // const__10:Lclojure/lang/AFn;
   #59 = Fieldref           #2.#58        // mutual_recursion__init.const__10:Lclojure/lang/AFn;
   #60 = Utf8               clojure/lang/IPersistentMap
   #61 = Class              #60           // clojure/lang/IPersistentMap
   #62 = Utf8               setMeta
   #63 = Utf8               (Lclojure/lang/IPersistentMap;)V
   #64 = NameAndType        #62:#63       // setMeta:(Lclojure/lang/IPersistentMap;)V
   #65 = Methodref          #12.#64       // clojure/lang/Var.setMeta:(Lclojure/lang/IPersistentMap;)V
   #66 = Utf8               const__11
   #67 = NameAndType        #66:#8        // const__11:Lclojure/lang/Var;
   #68 = Fieldref           #2.#67        // mutual_recursion__init.const__11:Lclojure/lang/Var;
   #69 = Utf8               const__15
   #70 = NameAndType        #69:#20       // const__15:Lclojure/lang/AFn;
   #71 = Fieldref           #2.#70        // mutual_recursion__init.const__15:Lclojure/lang/AFn;
   #72 = Utf8               mutual_recursion$is_odd
   #73 = Class              #72           // mutual_recursion$is_odd
   #74 = Methodref          #73.#30       // mutual_recursion$is_odd."<init>":()V
   #75 = Utf8               bindRoot
   #76 = Utf8               (Ljava/lang/Object;)V
   #77 = NameAndType        #75:#76       // bindRoot:(Ljava/lang/Object;)V
   #78 = Methodref          #12.#77       // clojure/lang/Var.bindRoot:(Ljava/lang/Object;)V
   #79 = Utf8               const__18
   #80 = NameAndType        #79:#20       // const__18:Lclojure/lang/AFn;
   #81 = Fieldref           #2.#80        // mutual_recursion__init.const__18:Lclojure/lang/AFn;
   #82 = Utf8               mutual_recursion$is_even
   #83 = Class              #82           // mutual_recursion$is_even
   #84 = Methodref          #83.#30       // mutual_recursion$is_even."<init>":()V
   #85 = Utf8               const__19
   #86 = NameAndType        #85:#8        // const__19:Lclojure/lang/Var;
   #87 = Fieldref           #2.#86        // mutual_recursion__init.const__19:Lclojure/lang/Var;
   #88 = Utf8               const__22
   #89 = NameAndType        #88:#20       // const__22:Lclojure/lang/AFn;
   #90 = Fieldref           #2.#89        // mutual_recursion__init.const__22:Lclojure/lang/AFn;
   #91 = Utf8               mutual_recursion$_main
   #92 = Class              #91           // mutual_recursion$_main
   #93 = Methodref          #92.#30       // mutual_recursion$_main."<init>":()V
   #94 = Utf8               __init0
   #95 = Utf8               clojure.core
   #96 = String             #95           // clojure.core
   #97 = Utf8               in-ns
   #98 = String             #97           // in-ns
   #99 = Utf8               clojure/lang/RT
  #100 = Class              #99           // clojure/lang/RT
  #101 = Utf8               var
  #102 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #103 = NameAndType        #101:#102     // var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #104 = Methodref          #100.#103     // clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #105 = Utf8               mutual-recursion
  #106 = String             #105          // mutual-recursion
  #107 = Utf8               intern
  #108 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
  #109 = NameAndType        #107:#108     // intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
  #110 = Methodref          #35.#109      // clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
  #111 = Utf8               clojure/lang/AFn
  #112 = Class              #111          // clojure/lang/AFn
  #113 = Utf8               is-even
  #114 = String             #113          // is-even
  #115 = Utf8               declared
  #116 = String             #115          // declared
  #117 = Utf8               keyword
  #118 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
  #119 = NameAndType        #117:#118     // keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
  #120 = Methodref          #100.#119     // clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
  #121 = Utf8               java/lang/Boolean
  #122 = Class              #121          // java/lang/Boolean
  #123 = Utf8               TRUE
  #124 = Utf8               Ljava/lang/Boolean;
  #125 = NameAndType        #123:#124     // TRUE:Ljava/lang/Boolean;
  #126 = Fieldref           #122.#125     // java/lang/Boolean.TRUE:Ljava/lang/Boolean;
  #127 = Utf8               line
  #128 = String             #127          // line
  #129 = Utf8               java/lang/Integer
  #130 = Class              #129          // java/lang/Integer
  #131 = Utf8               valueOf
  #132 = Utf8               (I)Ljava/lang/Integer;
  #133 = NameAndType        #131:#132     // valueOf:(I)Ljava/lang/Integer;
  #134 = Methodref          #130.#133     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
  #135 = Utf8               column
  #136 = String             #135          // column
  #137 = Utf8               file
  #138 = String             #137          // file
  #139 = Utf8               mutual_recursion.clj
  #140 = String             #139          // mutual_recursion.clj
  #141 = Utf8               map
  #142 = Utf8               ([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
  #143 = NameAndType        #141:#142     // map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
  #144 = Methodref          #100.#143     // clojure/lang/RT.map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
  #145 = Utf8               is-odd
  #146 = String             #145          // is-odd
  #147 = Utf8               arglists
  #148 = String             #147          // arglists
  #149 = Utf8               n
  #150 = String             #149          // n
  #151 = Utf8               clojure/lang/Tuple
  #152 = Class              #151          // clojure/lang/Tuple
  #153 = Utf8               create
  #154 = Utf8               (Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
  #155 = NameAndType        #153:#154     // create:(Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
  #156 = Methodref          #152.#155     // clojure/lang/Tuple.create:(Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
  #157 = Utf8               java/util/Arrays
  #158 = Class              #157          // java/util/Arrays
  #159 = Utf8               asList
  #160 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;
  #161 = NameAndType        #159:#160     // asList:([Ljava/lang/Object;)Ljava/util/List;
  #162 = Methodref          #158.#161     // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
  #163 = Utf8               clojure/lang/PersistentList
  #164 = Class              #163          // clojure/lang/PersistentList
  #165 = Utf8               (Ljava/util/List;)Lclojure/lang/IPersistentList;
  #166 = NameAndType        #153:#165     // create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
  #167 = Methodref          #164.#166     // clojure/lang/PersistentList.create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
  #168 = Utf8               -main
  #169 = String             #168          // -main
  #170 = Utf8               ()Lclojure/lang/IPersistentVector;
  #171 = NameAndType        #153:#170     // create:()Lclojure/lang/IPersistentVector;
  #172 = Methodref          #152.#171     // clojure/lang/Tuple.create:()Lclojure/lang/IPersistentVector;
  #173 = Utf8               <clinit>
  #174 = NameAndType        #94:#6        // __init0:()V
  #175 = Methodref          #2.#174       // mutual_recursion__init.__init0:()V
  #176 = String             #1            // mutual_recursion__init
  #177 = Utf8               classForName
  #178 = Utf8               (Ljava/lang/String;)Ljava/lang/Class;
  #179 = NameAndType        #177:#178     // classForName:(Ljava/lang/String;)Ljava/lang/Class;
  #180 = Methodref          #100.#179     // clojure/lang/RT.classForName:(Ljava/lang/String;)Ljava/lang/Class;
  #181 = Utf8               java/lang/Class
  #182 = Class              #181          // java/lang/Class
  #183 = Utf8               getClassLoader
  #184 = Utf8               ()Ljava/lang/ClassLoader;
  #185 = NameAndType        #183:#184     // getClassLoader:()Ljava/lang/ClassLoader;
  #186 = Methodref          #182.#185     // java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
  #187 = Utf8               clojure/lang/Compiler
  #188 = Class              #187          // clojure/lang/Compiler
  #189 = Utf8               pushNSandLoader
  #190 = Utf8               (Ljava/lang/ClassLoader;)V
  #191 = NameAndType        #189:#190     // pushNSandLoader:(Ljava/lang/ClassLoader;)V
  #192 = Methodref          #188.#191     // clojure/lang/Compiler.pushNSandLoader:(Ljava/lang/ClassLoader;)V
  #193 = NameAndType        #5:#6         // load:()V
  #194 = Methodref          #2.#193       // mutual_recursion__init.load:()V
  #195 = Utf8               popThreadBindings
  #196 = NameAndType        #195:#6       // popThreadBindings:()V
  #197 = Methodref          #12.#196      // clojure/lang/Var.popThreadBindings:()V
  #198 = Utf8               Code
  #199 = Utf8               LineNumberTable
{
  public static final clojure.lang.Var const__0;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.AFn const__1;
    descriptor: Lclojure/lang/AFn;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.AFn const__2;
    descriptor: Lclojure/lang/AFn;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.Var const__3;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.AFn const__10;
    descriptor: Lclojure/lang/AFn;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.Var const__11;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.AFn const__15;
    descriptor: Lclojure/lang/AFn;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.AFn const__18;
    descriptor: Lclojure/lang/AFn;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.Var const__19;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.AFn const__22;
    descriptor: Lclojure/lang/AFn;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static void load();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=10, locals=0, args_size=0
         0: getstatic     #10                 // Field const__0:Lclojure/lang/Var;
         3: invokevirtual #16                 // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
         6: checkcast     #18                 // class clojure/lang/IFn
         9: getstatic     #22                 // Field const__1:Lclojure/lang/AFn;
        12: invokeinterface #26,  2           // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;)Ljava/lang/Object;
        17: new           #28                 // class mutual_recursion$loading__5569__auto____5
        20: dup
        21: invokespecial #31                 // Method mutual_recursion$loading__5569__auto____5."<init>":()V
        24: checkcast     #18                 // class clojure/lang/IFn
        27: invokeinterface #33,  1           // InterfaceMethod clojure/lang/IFn.invoke:()Ljava/lang/Object;
        32: getstatic     #22                 // Field const__1:Lclojure/lang/AFn;
        35: checkcast     #35                 // class clojure/lang/Symbol
        38: getstatic     #38                 // Field const__2:Lclojure/lang/AFn;
        41: invokevirtual #42                 // Method clojure/lang/Symbol.equals:(Ljava/lang/Object;)Z
        44: ifeq          52
        47: aconst_null
        48: goto          67
        51: pop
        52: new           #44                 // class mutual_recursion$fn__7
        55: dup
        56: invokespecial #45                 // Method mutual_recursion$fn__7."<init>":()V
        59: checkcast     #47                 // class java/util/concurrent/Callable
        62: invokestatic  #53                 // Method clojure/lang/LockingTransaction.runInTransaction:(Ljava/util/concurrent/Callable;)Ljava/lang/Object;
        65: pop
        66: aconst_null
        67: getstatic     #56                 // Field const__3:Lclojure/lang/Var;
        70: dup
        71: getstatic     #59                 // Field const__10:Lclojure/lang/AFn;
        74: checkcast     #61                 // class clojure/lang/IPersistentMap
        77: invokevirtual #65                 // Method clojure/lang/Var.setMeta:(Lclojure/lang/IPersistentMap;)V
        80: getstatic     #68                 // Field const__11:Lclojure/lang/Var;
        83: dup
        84: getstatic     #71                 // Field const__15:Lclojure/lang/AFn;
        87: checkcast     #61                 // class clojure/lang/IPersistentMap
        90: invokevirtual #65                 // Method clojure/lang/Var.setMeta:(Lclojure/lang/IPersistentMap;)V
        93: dup
        94: new           #73                 // class mutual_recursion$is_odd
        97: dup
        98: invokespecial #74                 // Method mutual_recursion$is_odd."<init>":()V
       101: invokevirtual #78                 // Method clojure/lang/Var.bindRoot:(Ljava/lang/Object;)V
       104: getstatic     #56                 // Field const__3:Lclojure/lang/Var;
       107: dup
       108: getstatic     #81                 // Field const__18:Lclojure/lang/AFn;
       111: checkcast     #61                 // class clojure/lang/IPersistentMap
       114: invokevirtual #65                 // Method clojure/lang/Var.setMeta:(Lclojure/lang/IPersistentMap;)V
       117: dup
       118: new           #83                 // class mutual_recursion$is_even
       121: dup
       122: invokespecial #84                 // Method mutual_recursion$is_even."<init>":()V
       125: invokevirtual #78                 // Method clojure/lang/Var.bindRoot:(Ljava/lang/Object;)V
       128: getstatic     #87                 // Field const__19:Lclojure/lang/Var;
       131: dup
       132: getstatic     #90                 // Field const__22:Lclojure/lang/AFn;
       135: checkcast     #61                 // class clojure/lang/IPersistentMap
       138: invokevirtual #65                 // Method clojure/lang/Var.setMeta:(Lclojure/lang/IPersistentMap;)V
       141: dup
       142: new           #92                 // class mutual_recursion$_main
       145: dup
       146: invokespecial #93                 // Method mutual_recursion$_main."<init>":()V
       149: invokevirtual #78                 // Method clojure/lang/Var.bindRoot:(Ljava/lang/Object;)V
       152: return
      LineNumberTable:
        line 2: 6
        line 2: 12
        line 2: 24
        line 2: 27
        line 2: 32
        line 2: 41
        line 2: 62

  public static void __init0();
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=8, locals=0, args_size=0
         0: ldc           #96                 // String clojure.core
         2: ldc           #98                 // String in-ns
         4: invokestatic  #104                // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
         7: checkcast     #12                 // class clojure/lang/Var
        10: putstatic     #10                 // Field const__0:Lclojure/lang/Var;
        13: aconst_null
        14: ldc           #106                // String mutual-recursion
        16: invokestatic  #110                // Method clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
        19: checkcast     #112                // class clojure/lang/AFn
        22: putstatic     #22                 // Field const__1:Lclojure/lang/AFn;
        25: aconst_null
        26: ldc           #96                 // String clojure.core
        28: invokestatic  #110                // Method clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
        31: checkcast     #112                // class clojure/lang/AFn
        34: putstatic     #38                 // Field const__2:Lclojure/lang/AFn;
        37: ldc           #106                // String mutual-recursion
        39: ldc           #114                // String is-even
        41: invokestatic  #104                // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
        44: checkcast     #12                 // class clojure/lang/Var
        47: putstatic     #56                 // Field const__3:Lclojure/lang/Var;
        50: bipush        8
        52: anewarray     #4                  // class java/lang/Object
        55: dup
        56: iconst_0
        57: aconst_null
        58: ldc           #116                // String declared
        60: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
        63: aastore
        64: dup
        65: iconst_1
        66: getstatic     #126                // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
        69: aastore
        70: dup
        71: iconst_2
        72: aconst_null
        73: ldc           #128                // String line
        75: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
        78: aastore
        79: dup
        80: iconst_3
        81: iconst_5
        82: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        85: aastore
        86: dup
        87: iconst_4
        88: aconst_null
        89: ldc           #136                // String column
        91: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
        94: aastore
        95: dup
        96: iconst_5
        97: iconst_1
        98: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       101: aastore
       102: dup
       103: bipush        6
       105: aconst_null
       106: ldc           #138                // String file
       108: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       111: aastore
       112: dup
       113: bipush        7
       115: ldc           #140                // String mutual_recursion.clj
       117: aastore
       118: invokestatic  #144                // Method clojure/lang/RT.map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
       121: checkcast     #112                // class clojure/lang/AFn
       124: putstatic     #59                 // Field const__10:Lclojure/lang/AFn;
       127: ldc           #106                // String mutual-recursion
       129: ldc           #146                // String is-odd
       131: invokestatic  #104                // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
       134: checkcast     #12                 // class clojure/lang/Var
       137: putstatic     #68                 // Field const__11:Lclojure/lang/Var;
       140: bipush        8
       142: anewarray     #4                  // class java/lang/Object
       145: dup
       146: iconst_0
       147: aconst_null
       148: ldc           #148                // String arglists
       150: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       153: aastore
       154: dup
       155: iconst_1
       156: iconst_1
       157: anewarray     #4                  // class java/lang/Object
       160: dup
       161: iconst_0
       162: aconst_null
       163: ldc           #150                // String n
       165: invokestatic  #110                // Method clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
       168: invokestatic  #156                // Method clojure/lang/Tuple.create:(Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
       171: aastore
       172: invokestatic  #162                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       175: invokestatic  #167                // Method clojure/lang/PersistentList.create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
       178: aastore
       179: dup
       180: iconst_2
       181: aconst_null
       182: ldc           #128                // String line
       184: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       187: aastore
       188: dup
       189: iconst_3
       190: bipush        7
       192: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       195: aastore
       196: dup
       197: iconst_4
       198: aconst_null
       199: ldc           #136                // String column
       201: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       204: aastore
       205: dup
       206: iconst_5
       207: iconst_1
       208: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       211: aastore
       212: dup
       213: bipush        6
       215: aconst_null
       216: ldc           #138                // String file
       218: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       221: aastore
       222: dup
       223: bipush        7
       225: ldc           #140                // String mutual_recursion.clj
       227: aastore
       228: invokestatic  #144                // Method clojure/lang/RT.map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
       231: checkcast     #112                // class clojure/lang/AFn
       234: putstatic     #71                 // Field const__15:Lclojure/lang/AFn;
       237: bipush        8
       239: anewarray     #4                  // class java/lang/Object
       242: dup
       243: iconst_0
       244: aconst_null
       245: ldc           #148                // String arglists
       247: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       250: aastore
       251: dup
       252: iconst_1
       253: iconst_1
       254: anewarray     #4                  // class java/lang/Object
       257: dup
       258: iconst_0
       259: aconst_null
       260: ldc           #150                // String n
       262: invokestatic  #110                // Method clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
       265: invokestatic  #156                // Method clojure/lang/Tuple.create:(Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
       268: aastore
       269: invokestatic  #162                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       272: invokestatic  #167                // Method clojure/lang/PersistentList.create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
       275: aastore
       276: dup
       277: iconst_2
       278: aconst_null
       279: ldc           #128                // String line
       281: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       284: aastore
       285: dup
       286: iconst_3
       287: bipush        13
       289: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       292: aastore
       293: dup
       294: iconst_4
       295: aconst_null
       296: ldc           #136                // String column
       298: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       301: aastore
       302: dup
       303: iconst_5
       304: iconst_1
       305: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       308: aastore
       309: dup
       310: bipush        6
       312: aconst_null
       313: ldc           #138                // String file
       315: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       318: aastore
       319: dup
       320: bipush        7
       322: ldc           #140                // String mutual_recursion.clj
       324: aastore
       325: invokestatic  #144                // Method clojure/lang/RT.map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
       328: checkcast     #112                // class clojure/lang/AFn
       331: putstatic     #81                 // Field const__18:Lclojure/lang/AFn;
       334: ldc           #106                // String mutual-recursion
       336: ldc           #169                // String -main
       338: invokestatic  #104                // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
       341: checkcast     #12                 // class clojure/lang/Var
       344: putstatic     #87                 // Field const__19:Lclojure/lang/Var;
       347: bipush        8
       349: anewarray     #4                  // class java/lang/Object
       352: dup
       353: iconst_0
       354: aconst_null
       355: ldc           #148                // String arglists
       357: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       360: aastore
       361: dup
       362: iconst_1
       363: iconst_1
       364: anewarray     #4                  // class java/lang/Object
       367: dup
       368: iconst_0
       369: invokestatic  #172                // Method clojure/lang/Tuple.create:()Lclojure/lang/IPersistentVector;
       372: aastore
       373: invokestatic  #162                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
       376: invokestatic  #167                // Method clojure/lang/PersistentList.create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
       379: aastore
       380: dup
       381: iconst_2
       382: aconst_null
       383: ldc           #128                // String line
       385: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       388: aastore
       389: dup
       390: iconst_3
       391: bipush        19
       393: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       396: aastore
       397: dup
       398: iconst_4
       399: aconst_null
       400: ldc           #136                // String column
       402: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       405: aastore
       406: dup
       407: iconst_5
       408: iconst_1
       409: invokestatic  #134                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       412: aastore
       413: dup
       414: bipush        6
       416: aconst_null
       417: ldc           #138                // String file
       419: invokestatic  #120                // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       422: aastore
       423: dup
       424: bipush        7
       426: ldc           #140                // String mutual_recursion.clj
       428: aastore
       429: invokestatic  #144                // Method clojure/lang/RT.map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
       432: checkcast     #112                // class clojure/lang/AFn
       435: putstatic     #90                 // Field const__22:Lclojure/lang/AFn;
       438: return

  public static {};
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=1, locals=0, args_size=0
         0: invokestatic  #175                // Method __init0:()V
         3: ldc           #176                // String mutual_recursion__init
         5: invokestatic  #180                // Method clojure/lang/RT.classForName:(Ljava/lang/String;)Ljava/lang/Class;
         8: invokevirtual #186                // Method java/lang/Class.getClassLoader:()Ljava/lang/ClassLoader;
        11: invokestatic  #192                // Method clojure/lang/Compiler.pushNSandLoader:(Ljava/lang/ClassLoader;)V
        14: invokestatic  #194                // Method load:()V
        17: invokestatic  #197                // Method clojure/lang/Var.popThreadBindings:()V
        20: goto          27
        23: invokestatic  #197                // Method clojure/lang/Var.popThreadBindings:()V
        26: athrow
        27: return
      Exception table:
         from    to  target type
            14    17    23   any
}
