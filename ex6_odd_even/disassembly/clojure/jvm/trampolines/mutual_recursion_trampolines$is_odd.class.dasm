Classfile /Users/tuuli/school/thesis_examples/ex3_mutual_recursion/temp$_39916801/mutual_recursion_trampolines$is_odd.class
  Last modified Feb 29, 2016; size 1164 bytes
  MD5 checksum 412789d8901ea76b212bd9e62b5e9ca6
  Compiled from "mutual_recursion_trampolines.clj"
public final class mutual_recursion_trampolines$is_odd extends clojure.lang.AFunction
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC, ACC_FINAL, ACC_SUPER
Constant pool:
   #1 = Utf8               mutual_recursion_trampolines$is_odd
   #2 = Class              #1             // mutual_recursion_trampolines$is_odd
   #3 = Utf8               clojure/lang/AFunction
   #4 = Class              #3             // clojure/lang/AFunction
   #5 = Utf8               mutual_recursion_trampolines.clj
   #6 = Utf8               <init>
   #7 = Utf8               ()V
   #8 = NameAndType        #6:#7          // "<init>":()V
   #9 = Methodref          #4.#8          // clojure/lang/AFunction."<init>":()V
  #10 = Utf8               invokeStatic
  #11 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
  #12 = Utf8               const__0
  #13 = Utf8               Lclojure/lang/Var;
  #14 = NameAndType        #12:#13        // const__0:Lclojure/lang/Var;
  #15 = Fieldref           #2.#14         // mutual_recursion_trampolines$is_odd.const__0:Lclojure/lang/Var;
  #16 = Utf8               clojure/lang/Var
  #17 = Class              #16            // clojure/lang/Var
  #18 = Utf8               getRawRoot
  #19 = Utf8               ()Ljava/lang/Object;
  #20 = NameAndType        #18:#19        // getRawRoot:()Ljava/lang/Object;
  #21 = Methodref          #17.#20        // clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
  #22 = Utf8               clojure/lang/IFn
  #23 = Class              #22            // clojure/lang/IFn
  #24 = Utf8               const__1
  #25 = NameAndType        #24:#13        // const__1:Lclojure/lang/Var;
  #26 = Fieldref           #2.#25         // mutual_recursion_trampolines$is_odd.const__1:Lclojure/lang/Var;
  #27 = Utf8               invoke
  #28 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #29 = NameAndType        #27:#28        // invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #30 = InterfaceMethodref #23.#29        // clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #31 = Utf8               n
  #32 = Utf8               Ljava/lang/Object;
  #33 = NameAndType        #10:#11        // invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;
  #34 = Methodref          #2.#33         // mutual_recursion_trampolines$is_odd.invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;
  #35 = Utf8               <clinit>
  #36 = Utf8               clojure.core
  #37 = String             #36            // clojure.core
  #38 = Utf8               trampoline
  #39 = String             #38            // trampoline
  #40 = Utf8               clojure/lang/RT
  #41 = Class              #40            // clojure/lang/RT
  #42 = Utf8               var
  #43 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #44 = NameAndType        #42:#43        // var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #45 = Methodref          #41.#44        // clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #46 = Utf8               mutual-recursion-trampolines
  #47 = String             #46            // mutual-recursion-trampolines
  #48 = Utf8               is-odd-fn
  #49 = String             #48            // is-odd-fn
  #50 = Utf8               Code
  #51 = Utf8               LineNumberTable
  #52 = Utf8               LocalVariableTable
  #53 = Utf8               SourceFile
  #54 = Utf8               SourceDebugExtension
{
  public static final clojure.lang.Var const__0;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.Var const__1;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public mutual_recursion_trampolines$is_odd();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #9                  // Method clojure/lang/AFunction."<init>":()V
         4: return
      LineNumberTable:
        line 21: 0

  public static java.lang.Object invokeStatic(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=1, args_size=1
         0: getstatic     #15                 // Field const__0:Lclojure/lang/Var;
         3: invokevirtual #21                 // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
         6: checkcast     #23                 // class clojure/lang/IFn
         9: getstatic     #26                 // Field const__1:Lclojure/lang/Var;
        12: invokevirtual #21                 // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
        15: aload_0
        16: aconst_null
        17: astore_0
        18: invokeinterface #30,  3           // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        23: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0     n   Ljava/lang/Object;
      LineNumberTable:
        line 21: 0
        line 22: 6
        line 22: 18

  public java.lang.Object invoke(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: aconst_null
         2: astore_1
         3: invokestatic  #34                 // Method invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;
         6: areturn
      LineNumberTable:
        line 21: 3

  public static {};
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: ldc           #37                 // String clojure.core
         2: ldc           #39                 // String trampoline
         4: invokestatic  #45                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
         7: checkcast     #17                 // class clojure/lang/Var
        10: putstatic     #15                 // Field const__0:Lclojure/lang/Var;
        13: ldc           #47                 // String mutual-recursion-trampolines
        15: ldc           #49                 // String is-odd-fn
        17: invokestatic  #45                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
        20: checkcast     #17                 // class clojure/lang/Var
        23: putstatic     #26                 // Field const__1:Lclojure/lang/Var;
        26: return
      LineNumberTable:
        line 21: 0
}
SourceFile: "mutual_recursion_trampolines.clj"
SourceDebugExtension:
  SMAP
  mutual_recursion_trampolines.java
  Clojure
  *S Clojure
  *F
  + 1 mutual_recursion_trampolines.clj
  mutual_recursion_trampolines.clj
  *L
  18#1,5:18
  *E
