Classfile /Users/tuuli/school/thesis_examples/ex9_nested_closure/temp$_39916801/nested_closure$frame.class
  Last modified Jun 2, 2016; size 1712 bytes
  MD5 checksum cc78009068b15d8bab6a6d7658309490
  Compiled from "nested_closure.scm"
public class nested_closure$frame extends gnu.expr.ModuleBody
  minor version: 0
  major version: 51
  flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
   #1 = Utf8               nested_closure$frame
   #2 = Class              #1             // nested_closure$frame
   #3 = Utf8               java/lang/Object
   #4 = Class              #3             // java/lang/Object
   #5 = Utf8               nested_closure$frame0
   #6 = Class              #5             // nested_closure$frame0
   #7 = Utf8               <init>
   #8 = Utf8               ()V
   #9 = NameAndType        #7:#8          // "<init>":()V
  #10 = Methodref          #6.#9          // nested_closure$frame0."<init>":()V
  #11 = Utf8               staticLink
  #12 = Utf8               Lnested_closure$frame;
  #13 = NameAndType        #11:#12        // staticLink:Lnested_closure$frame;
  #14 = Fieldref           #6.#13         // nested_closure$frame0.staticLink:Lnested_closure$frame;
  #15 = Utf8               y
  #16 = Utf8               Ljava/lang/Object;
  #17 = NameAndType        #15:#16        // y:Ljava/lang/Object;
  #18 = Fieldref           #6.#17         // nested_closure$frame0.y:Ljava/lang/Object;
  #19 = Utf8               lambda$Fn2
  #20 = Utf8               Lgnu/expr/ModuleMethod;
  #21 = NameAndType        #19:#20        // lambda$Fn2:Lgnu/expr/ModuleMethod;
  #22 = Fieldref           #6.#21         // nested_closure$frame0.lambda$Fn2:Lgnu/expr/ModuleMethod;
  #23 = Utf8               gnu/expr/ModuleBody
  #24 = Class              #23            // gnu/expr/ModuleBody
  #25 = Methodref          #24.#9         // gnu/expr/ModuleBody."<init>":()V
  #26 = Utf8               gnu/expr/ModuleMethod
  #27 = Class              #26            // gnu/expr/ModuleMethod
  #28 = Utf8               (Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
  #29 = NameAndType        #7:#28         // "<init>":(Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
  #30 = Methodref          #27.#29        // gnu/expr/ModuleMethod."<init>":(Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
  #31 = Utf8               source-location
  #32 = String             #31            // source-location
  #33 = Utf8               nested_closure.scm:3
  #34 = String             #33            // nested_closure.scm:3
  #35 = Utf8               gnu/mapping/PropertySet
  #36 = Class              #35            // gnu/mapping/PropertySet
  #37 = Utf8               setProperty
  #38 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)V
  #39 = NameAndType        #37:#38        // setProperty:(Ljava/lang/Object;Ljava/lang/Object;)V
  #40 = Methodref          #36.#39        // gnu/mapping/PropertySet.setProperty:(Ljava/lang/Object;Ljava/lang/Object;)V
  #41 = Utf8               lambda$Fn1
  #42 = NameAndType        #41:#20        // lambda$Fn1:Lgnu/expr/ModuleMethod;
  #43 = Fieldref           #2.#42         // nested_closure$frame.lambda$Fn1:Lgnu/expr/ModuleMethod;
  #44 = Utf8               gnu/mapping/CallContext
  #45 = Class              #44            // gnu/mapping/CallContext
  #46 = Utf8               selector
  #47 = Utf8               I
  #48 = NameAndType        #46:#47        // selector:I
  #49 = Fieldref           #27.#48        // gnu/expr/ModuleMethod.selector:I
  #50 = Utf8               value1
  #51 = NameAndType        #50:#16        // value1:Ljava/lang/Object;
  #52 = Fieldref           #45.#51        // gnu/mapping/CallContext.value1:Ljava/lang/Object;
  #53 = Utf8               proc
  #54 = Utf8               Lgnu/mapping/Procedure;
  #55 = NameAndType        #53:#54        // proc:Lgnu/mapping/Procedure;
  #56 = Fieldref           #45.#55        // gnu/mapping/CallContext.proc:Lgnu/mapping/Procedure;
  #57 = Utf8               pc
  #58 = NameAndType        #57:#47        // pc:I
  #59 = Fieldref           #45.#58        // gnu/mapping/CallContext.pc:I
  #60 = Utf8               match1
  #61 = Utf8               (Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
  #62 = NameAndType        #60:#61        // match1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
  #63 = Methodref          #24.#62        // gnu/expr/ModuleBody.match1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
  #64 = Utf8               applyError
  #65 = NameAndType        #64:#8         // applyError:()V
  #66 = Methodref          #27.#65        // gnu/expr/ModuleMethod.applyError:()V
  #67 = Utf8               lambda1
  #68 = Utf8               (Ljava/lang/Object;)Lgnu/mapping/Procedure;
  #69 = NameAndType        #67:#68        // lambda1:(Ljava/lang/Object;)Lgnu/mapping/Procedure;
  #70 = Methodref          #2.#69         // nested_closure$frame.lambda1:(Ljava/lang/Object;)Lgnu/mapping/Procedure;
  #71 = Utf8               apply1
  #72 = Utf8               (Lgnu/expr/ModuleMethod;Ljava/lang/Object;)Ljava/lang/Object;
  #73 = NameAndType        #71:#72        // apply1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;)Ljava/lang/Object;
  #74 = Methodref          #24.#73        // gnu/expr/ModuleBody.apply1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;)Ljava/lang/Object;
  #75 = Utf8               x
  #76 = Utf8               Code
  #77 = Utf8               LineNumberTable
  #78 = Utf8               LocalVariableTable
  #79 = Utf8               this
  #80 = Utf8               $heapFrame
  #81 = Utf8               Lnested_closure$frame0;
  #82 = Utf8               StackMapTable
  #83 = Utf8               apply
  #84 = Utf8               (Lgnu/mapping/CallContext;)V
  #85 = Utf8               EnclosingMethod
  #86 = Utf8               nested_closure
  #87 = Class              #86            // nested_closure
  #88 = Utf8               add
  #89 = NameAndType        #88:#68        // add:(Ljava/lang/Object;)Lgnu/mapping/Procedure;
  #90 = Utf8               SourceFile
  #91 = Utf8               nested_closure.scm
  #92 = Utf8               SourceDebugExtension
  #93 = Utf8               InnerClasses
{
  java.lang.Object x;
    descriptor: Ljava/lang/Object;
    flags:

  final gnu.expr.ModuleMethod lambda$Fn1;
    descriptor: Lgnu/expr/ModuleMethod;
    flags: ACC_FINAL

  public nested_closure$frame();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=7, locals=1, args_size=1
         0: aload_0
         1: invokespecial #25                 // Method gnu/expr/ModuleBody."<init>":()V
         4: aload_0
         5: new           #27                 // class gnu/expr/ModuleMethod
         8: dup
         9: aload_0
        10: iconst_2
        11: aconst_null
        12: sipush        4097
        15: invokespecial #30                 // Method gnu/expr/ModuleMethod."<init>":(Lgnu/expr/ModuleBody;ILjava/lang/Object;I)V
        18: dup
        19: ldc           #32                 // String source-location
        21: ldc           #34                 // String nested_closure.scm:3
        23: invokevirtual #40                 // Method gnu/mapping/PropertySet.setProperty:(Ljava/lang/Object;Ljava/lang/Object;)V
        26: putfield      #43                 // Field lambda$Fn1:Lgnu/expr/ModuleMethod;
        29: return

  gnu.mapping.Procedure lambda1(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Lgnu/mapping/Procedure;
    flags:
    Code:
      stack=3, locals=3, args_size=2
         0: new           #6                  // class nested_closure$frame0
         3: dup
         4: invokespecial #10                 // Method nested_closure$frame0."<init>":()V
         7: dup
         8: aload_0
         9: putfield      #14                 // Field nested_closure$frame0.staticLink:Lnested_closure$frame;
        12: astore_2
        13: aload_2
        14: aload_1
        15: putfield      #18                 // Field nested_closure$frame0.y:Ljava/lang/Object;
        18: aload_2
        19: getfield      #22                 // Field nested_closure$frame0.lambda$Fn2:Lgnu/expr/ModuleMethod;
        22: areturn
      LineNumberTable:
        line 3: 0
        line 4: 18
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      23     0  this   Lnested_closure$frame;
            0      22     1     y   Ljava/lang/Object;
           13       9     2 $heapFrame   Lnested_closure$frame0;

  public int match1(gnu.expr.ModuleMethod, java.lang.Object, gnu.mapping.CallContext);
    descriptor: (Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
    flags: ACC_PUBLIC
    Code:
      stack=4, locals=4, args_size=4
         0: aload_1
         1: getfield      #49                 // Field gnu/expr/ModuleMethod.selector:I
         4: iconst_2
         5: if_icmpne     28
         8: goto          11
        11: aload_3
        12: aload_2
        13: putfield      #52                 // Field gnu/mapping/CallContext.value1:Ljava/lang/Object;
        16: aload_3
        17: aload_1
        18: putfield      #56                 // Field gnu/mapping/CallContext.proc:Lgnu/mapping/Procedure;
        21: aload_3
        22: iconst_1
        23: putfield      #59                 // Field gnu/mapping/CallContext.pc:I
        26: iconst_0
        27: ireturn
        28: aload_0
        29: aload_1
        30: aload_2
        31: aload_3
        32: invokespecial #63                 // Method gnu/expr/ModuleBody.match1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;Lgnu/mapping/CallContext;)I
        35: ireturn
      StackMapTable: number_of_entries = 3
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 6 /* same */
        frame_type = 16 /* same */
      LineNumberTable:
        line 3: 11

  public void apply(gnu.mapping.CallContext);
    descriptor: (Lgnu/mapping/CallContext;)V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=2, args_size=2
         0: aload_1
         1: getfield      #59                 // Field gnu/mapping/CallContext.pc:I
         4: pop
         5: goto          8
         8: invokestatic  #66                 // Method gnu/expr/ModuleMethod.applyError:()V
        11: return
      StackMapTable: number_of_entries = 2
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 3 /* same */

  public java.lang.Object apply1(gnu.expr.ModuleMethod, java.lang.Object);
    descriptor: (Lgnu/expr/ModuleMethod;Ljava/lang/Object;)Ljava/lang/Object;
    flags: ACC_PUBLIC
    Code:
      stack=3, locals=3, args_size=3
         0: aload_1
         1: getfield      #49                 // Field gnu/expr/ModuleMethod.selector:I
         4: iconst_2
         5: if_icmpne     17
         8: goto          11
        11: aload_0
        12: aload_2
        13: invokevirtual #70                 // Method lambda1:(Ljava/lang/Object;)Lgnu/mapping/Procedure;
        16: areturn
        17: aload_0
        18: aload_1
        19: aload_2
        20: invokespecial #74                 // Method gnu/expr/ModuleBody.apply1:(Lgnu/expr/ModuleMethod;Ljava/lang/Object;)Ljava/lang/Object;
        23: areturn
      StackMapTable: number_of_entries = 3
        frame_type = 68 /* same_locals_1_stack_item */
          stack = [ int ]
        frame_type = 6 /* same */
        frame_type = 5 /* same */
      LineNumberTable:
        line 3: 11
}
InnerClasses:
     public #1= #2; //nested_closure$frame=class nested_closure$frame
     public #5= #6; //nested_closure$frame0=class nested_closure$frame0
EnclosingMethod: #87.#89                // nested_closure.add
SourceFile: "nested_closure.scm"
SourceDebugExtension:
  SMAP
  nested_closure.scm
  Scheme
  *S Scheme
  *F
  1 nested_closure.scm
  *L
  3#1,2:3
  *E
