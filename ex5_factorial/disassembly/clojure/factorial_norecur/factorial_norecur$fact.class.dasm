Classfile /Users/tuuli/school/thesis_examples/ex1_factorial/temp$_39916801/factorial_norecur$fact.class
  Last modified Feb 17, 2016; size 2186 bytes
  MD5 checksum 6ddc26bb5f2cb1cd2625900098104a56
  Compiled from "factorial_norecur.clj"
public final class factorial_norecur$fact extends clojure.lang.AFunction
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC, ACC_FINAL, ACC_SUPER
Constant pool:
    #1 = Utf8               factorial_norecur$fact
    #2 = Class              #1            // factorial_norecur$fact
    #3 = Utf8               clojure/lang/AFunction
    #4 = Class              #3            // clojure/lang/AFunction
    #5 = Utf8               factorial_norecur.clj
    #6 = Utf8               <init>
    #7 = Utf8               ()V
    #8 = NameAndType        #6:#7         // "<init>":()V
    #9 = Methodref          #4.#8         // clojure/lang/AFunction."<init>":()V
   #10 = Utf8               invokeStatic
   #11 = Utf8               (Ljava/lang/Object;)Ljava/lang/Object;
   #12 = Utf8               const__0
   #13 = Utf8               Lclojure/lang/Var;
   #14 = NameAndType        #12:#13       // const__0:Lclojure/lang/Var;
   #15 = Fieldref           #2.#14        // factorial_norecur$fact.const__0:Lclojure/lang/Var;
   #16 = Utf8               const__8
   #17 = Utf8               Lclojure/lang/AFn;
   #18 = NameAndType        #16:#17       // const__8:Lclojure/lang/AFn;
   #19 = Fieldref           #2.#18        // factorial_norecur$fact.const__8:Lclojure/lang/AFn;
   #20 = Utf8               clojure/lang/IPersistentMap
   #21 = Class              #20           // clojure/lang/IPersistentMap
   #22 = Utf8               clojure/lang/Var
   #23 = Class              #22           // clojure/lang/Var
   #24 = Utf8               setMeta
   #25 = Utf8               (Lclojure/lang/IPersistentMap;)V
   #26 = NameAndType        #24:#25       // setMeta:(Lclojure/lang/IPersistentMap;)V
   #27 = Methodref          #23.#26       // clojure/lang/Var.setMeta:(Lclojure/lang/IPersistentMap;)V
   #28 = Utf8               factorial_norecur$fact$fact_helper__9
   #29 = Class              #28           // factorial_norecur$fact$fact_helper__9
   #30 = Methodref          #29.#8        // factorial_norecur$fact$fact_helper__9."<init>":()V
   #31 = Utf8               bindRoot
   #32 = Utf8               (Ljava/lang/Object;)V
   #33 = NameAndType        #31:#32       // bindRoot:(Ljava/lang/Object;)V
   #34 = Methodref          #23.#33       // clojure/lang/Var.bindRoot:(Ljava/lang/Object;)V
   #35 = Utf8               getRawRoot
   #36 = Utf8               ()Ljava/lang/Object;
   #37 = NameAndType        #35:#36       // getRawRoot:()Ljava/lang/Object;
   #38 = Methodref          #23.#37       // clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
   #39 = Utf8               clojure/lang/IFn
   #40 = Class              #39           // clojure/lang/IFn
   #41 = Utf8               const__9
   #42 = Utf8               Ljava/lang/Object;
   #43 = NameAndType        #41:#42       // const__9:Ljava/lang/Object;
   #44 = Fieldref           #2.#43        // factorial_norecur$fact.const__9:Ljava/lang/Object;
   #45 = Utf8               invoke
   #46 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   #47 = NameAndType        #45:#46       // invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   #48 = InterfaceMethodref #40.#47       // clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   #49 = Utf8               n
   #50 = NameAndType        #10:#11       // invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;
   #51 = Methodref          #2.#50        // factorial_norecur$fact.invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;
   #52 = Utf8               <clinit>
   #53 = Utf8               factorial_norecur
   #54 = String             #53           // factorial_norecur
   #55 = Utf8               fact-helper
   #56 = String             #55           // fact-helper
   #57 = Utf8               clojure/lang/RT
   #58 = Class              #57           // clojure/lang/RT
   #59 = Utf8               var
   #60 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
   #61 = NameAndType        #59:#60       // var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
   #62 = Methodref          #58.#61       // clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
   #63 = Utf8               java/lang/Object
   #64 = Class              #63           // java/lang/Object
   #65 = Utf8               arglists
   #66 = String             #65           // arglists
   #67 = Utf8               keyword
   #68 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
   #69 = NameAndType        #67:#68       // keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
   #70 = Methodref          #58.#69       // clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
   #71 = String             #49           // n
   #72 = Utf8               clojure/lang/Symbol
   #73 = Class              #72           // clojure/lang/Symbol
   #74 = Utf8               intern
   #75 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
   #76 = NameAndType        #74:#75       // intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
   #77 = Methodref          #73.#76       // clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
   #78 = Utf8               acc
   #79 = String             #78           // acc
   #80 = Utf8               clojure/lang/Tuple
   #81 = Class              #80           // clojure/lang/Tuple
   #82 = Utf8               create
   #83 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
   #84 = NameAndType        #82:#83       // create:(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
   #85 = Methodref          #81.#84       // clojure/lang/Tuple.create:(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
   #86 = Utf8               java/util/Arrays
   #87 = Class              #86           // java/util/Arrays
   #88 = Utf8               asList
   #89 = Utf8               ([Ljava/lang/Object;)Ljava/util/List;
   #90 = NameAndType        #88:#89       // asList:([Ljava/lang/Object;)Ljava/util/List;
   #91 = Methodref          #87.#90       // java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
   #92 = Utf8               clojure/lang/PersistentList
   #93 = Class              #92           // clojure/lang/PersistentList
   #94 = Utf8               (Ljava/util/List;)Lclojure/lang/IPersistentList;
   #95 = NameAndType        #82:#94       // create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
   #96 = Methodref          #93.#95       // clojure/lang/PersistentList.create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
   #97 = Utf8               line
   #98 = String             #97           // line
   #99 = Utf8               java/lang/Integer
  #100 = Class              #99           // java/lang/Integer
  #101 = Utf8               valueOf
  #102 = Utf8               (I)Ljava/lang/Integer;
  #103 = NameAndType        #101:#102     // valueOf:(I)Ljava/lang/Integer;
  #104 = Methodref          #100.#103     // java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
  #105 = Utf8               column
  #106 = String             #105          // column
  #107 = Utf8               file
  #108 = String             #107          // file
  #109 = String             #5            // factorial_norecur.clj
  #110 = Utf8               map
  #111 = Utf8               ([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
  #112 = NameAndType        #110:#111     // map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
  #113 = Methodref          #58.#112      // clojure/lang/RT.map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
  #114 = Utf8               clojure/lang/AFn
  #115 = Class              #114          // clojure/lang/AFn
  #116 = Utf8               java/lang/Long
  #117 = Class              #116          // java/lang/Long
  #118 = Utf8               (J)Ljava/lang/Long;
  #119 = NameAndType        #101:#118     // valueOf:(J)Ljava/lang/Long;
  #120 = Methodref          #117.#119     // java/lang/Long.valueOf:(J)Ljava/lang/Long;
  #121 = Utf8               Code
  #122 = Utf8               LineNumberTable
  #123 = Utf8               LocalVariableTable
  #124 = Utf8               SourceFile
  #125 = Utf8               SourceDebugExtension
{
  public static final clojure.lang.Var const__0;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final clojure.lang.AFn const__8;
    descriptor: Lclojure/lang/AFn;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public static final java.lang.Object const__9;
    descriptor: Ljava/lang/Object;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public factorial_norecur$fact();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #9                  // Method clojure/lang/AFunction."<init>":()V
         4: return
      LineNumberTable:
        line 8: 0

  public static java.lang.Object invokeStatic(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=1, args_size=1
         0: getstatic     #15                 // Field const__0:Lclojure/lang/Var;
         3: dup
         4: getstatic     #19                 // Field const__8:Lclojure/lang/AFn;
         7: checkcast     #21                 // class clojure/lang/IPersistentMap
        10: invokevirtual #27                 // Method clojure/lang/Var.setMeta:(Lclojure/lang/IPersistentMap;)V
        13: dup
        14: new           #29                 // class factorial_norecur$fact$fact_helper__9
        17: dup
        18: invokespecial #30                 // Method factorial_norecur$fact$fact_helper__9."<init>":()V
        21: invokevirtual #34                 // Method clojure/lang/Var.bindRoot:(Ljava/lang/Object;)V
        24: pop
        25: getstatic     #15                 // Field const__0:Lclojure/lang/Var;
        28: invokevirtual #38                 // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
        31: checkcast     #40                 // class clojure/lang/IFn
        34: aload_0
        35: aconst_null
        36: astore_0
        37: getstatic     #44                 // Field const__9:Ljava/lang/Object;
        40: invokeinterface #48,  3           // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        45: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      45     0     n   Ljava/lang/Object;
      LineNumberTable:
        line 8: 0
        line 13: 31
        line 13: 40

  public java.lang.Object invoke(java.lang.Object);
    descriptor: (Ljava/lang/Object;)Ljava/lang/Object;
    flags: ACC_PUBLIC
    Code:
      stack=2, locals=2, args_size=2
         0: aload_1
         1: aconst_null
         2: astore_1
         3: invokestatic  #51                 // Method invokeStatic:(Ljava/lang/Object;)Ljava/lang/Object;
         6: areturn
      LineNumberTable:
        line 8: 3

  public static {};
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=9, locals=0, args_size=0
         0: ldc           #54                 // String factorial_norecur
         2: ldc           #56                 // String fact-helper
         4: invokestatic  #62                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
         7: checkcast     #23                 // class clojure/lang/Var
        10: putstatic     #15                 // Field const__0:Lclojure/lang/Var;
        13: bipush        8
        15: anewarray     #64                 // class java/lang/Object
        18: dup
        19: iconst_0
        20: aconst_null
        21: ldc           #66                 // String arglists
        23: invokestatic  #70                 // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
        26: aastore
        27: dup
        28: iconst_1
        29: iconst_1
        30: anewarray     #64                 // class java/lang/Object
        33: dup
        34: iconst_0
        35: aconst_null
        36: ldc           #71                 // String n
        38: invokestatic  #77                 // Method clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
        41: aconst_null
        42: ldc           #79                 // String acc
        44: invokestatic  #77                 // Method clojure/lang/Symbol.intern:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Symbol;
        47: invokestatic  #85                 // Method clojure/lang/Tuple.create:(Ljava/lang/Object;Ljava/lang/Object;)Lclojure/lang/IPersistentVector;
        50: aastore
        51: invokestatic  #91                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
        54: invokestatic  #96                 // Method clojure/lang/PersistentList.create:(Ljava/util/List;)Lclojure/lang/IPersistentList;
        57: aastore
        58: dup
        59: iconst_2
        60: aconst_null
        61: ldc           #98                 // String line
        63: invokestatic  #70                 // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
        66: aastore
        67: dup
        68: iconst_3
        69: bipush        9
        71: invokestatic  #104                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        74: aastore
        75: dup
        76: iconst_4
        77: aconst_null
        78: ldc           #106                // String column
        80: invokestatic  #70                 // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
        83: aastore
        84: dup
        85: iconst_5
        86: iconst_3
        87: invokestatic  #104                // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
        90: aastore
        91: dup
        92: bipush        6
        94: aconst_null
        95: ldc           #108                // String file
        97: invokestatic  #70                 // Method clojure/lang/RT.keyword:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Keyword;
       100: aastore
       101: dup
       102: bipush        7
       104: ldc           #109                // String factorial_norecur.clj
       106: aastore
       107: invokestatic  #113                // Method clojure/lang/RT.map:([Ljava/lang/Object;)Lclojure/lang/IPersistentMap;
       110: checkcast     #115                // class clojure/lang/AFn
       113: putstatic     #19                 // Field const__8:Lclojure/lang/AFn;
       116: lconst_1
       117: invokestatic  #120                // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
       120: putstatic     #44                 // Field const__9:Ljava/lang/Object;
       123: return
      LineNumberTable:
        line 8: 0
}
SourceFile: "factorial_norecur.clj"
SourceDebugExtension:
  SMAP
  factorial_norecur.java
  Clojure
  *S Clojure
  *F
  + 1 factorial_norecur.clj
  factorial_norecur.clj
  *L
  6#1,8:6
  *E
