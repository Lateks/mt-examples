Classfile /Users/tuuli/school/thesis_examples/ex1_factorial/temp$_39916801/factorial_norecur$fact$fact_helper__9.class
  Last modified Feb 17, 2016; size 1202 bytes
  MD5 checksum caf416b8e6ba663724a185088de533ef
  Compiled from "factorial_norecur.clj"
public final class factorial_norecur$fact$fact_helper__9 extends clojure.lang.AFunction
  minor version: 0
  major version: 49
  flags: ACC_PUBLIC, ACC_FINAL, ACC_SUPER
Constant pool:
   #1 = Utf8               factorial_norecur$fact$fact_helper__9
   #2 = Class              #1             // factorial_norecur$fact$fact_helper__9
   #3 = Utf8               clojure/lang/AFunction
   #4 = Class              #3             // clojure/lang/AFunction
   #5 = Utf8               factorial_norecur.clj
   #6 = Utf8               <init>
   #7 = Utf8               ()V
   #8 = NameAndType        #6:#7          // "<init>":()V
   #9 = Methodref          #4.#8          // clojure/lang/AFunction."<init>":()V
  #10 = Utf8               invoke
  #11 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #12 = Utf8               clojure/lang/Numbers
  #13 = Class              #12            // clojure/lang/Numbers
  #14 = Utf8               isZero
  #15 = Utf8               (Ljava/lang/Object;)Z
  #16 = NameAndType        #14:#15        // isZero:(Ljava/lang/Object;)Z
  #17 = Methodref          #13.#16        // clojure/lang/Numbers.isZero:(Ljava/lang/Object;)Z
  #18 = Utf8               const__1
  #19 = Utf8               Lclojure/lang/Var;
  #20 = NameAndType        #18:#19        // const__1:Lclojure/lang/Var;
  #21 = Fieldref           #2.#20         // factorial_norecur$fact$fact_helper__9.const__1:Lclojure/lang/Var;
  #22 = Utf8               clojure/lang/Var
  #23 = Class              #22            // clojure/lang/Var
  #24 = Utf8               getRawRoot
  #25 = Utf8               ()Ljava/lang/Object;
  #26 = NameAndType        #24:#25        // getRawRoot:()Ljava/lang/Object;
  #27 = Methodref          #23.#26        // clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
  #28 = Utf8               clojure/lang/IFn
  #29 = Class              #28            // clojure/lang/IFn
  #30 = Utf8               minus
  #31 = Utf8               (Ljava/lang/Object;J)Ljava/lang/Number;
  #32 = NameAndType        #30:#31        // minus:(Ljava/lang/Object;J)Ljava/lang/Number;
  #33 = Methodref          #13.#32        // clojure/lang/Numbers.minus:(Ljava/lang/Object;J)Ljava/lang/Number;
  #34 = Utf8               multiplyP
  #35 = Utf8               (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
  #36 = NameAndType        #34:#35        // multiplyP:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
  #37 = Methodref          #13.#36        // clojure/lang/Numbers.multiplyP:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
  #38 = NameAndType        #10:#11        // invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #39 = InterfaceMethodref #29.#38        // clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  #40 = Utf8               this
  #41 = Utf8               Ljava/lang/Object;
  #42 = Utf8               n
  #43 = Utf8               acc
  #44 = Utf8               <clinit>
  #45 = Utf8               factorial_norecur
  #46 = String             #45            // factorial_norecur
  #47 = Utf8               fact-helper
  #48 = String             #47            // fact-helper
  #49 = Utf8               clojure/lang/RT
  #50 = Class              #49            // clojure/lang/RT
  #51 = Utf8               var
  #52 = Utf8               (Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #53 = NameAndType        #51:#52        // var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #54 = Methodref          #50.#53        // clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
  #55 = Utf8               Code
  #56 = Utf8               LineNumberTable
  #57 = Utf8               LocalVariableTable
  #58 = Utf8               SourceFile
  #59 = Utf8               SourceDebugExtension
{
  public static final clojure.lang.Var const__1;
    descriptor: Lclojure/lang/Var;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL

  public factorial_norecur$fact$fact_helper__9();
    descriptor: ()V
    flags: ACC_PUBLIC
    Code:
      stack=1, locals=1, args_size=1
         0: aload_0
         1: invokespecial #9                  // Method clojure/lang/AFunction."<init>":()V
         4: return
      LineNumberTable:
        line 9: 0

  public java.lang.Object invoke(java.lang.Object, java.lang.Object);
    descriptor: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    flags: ACC_PUBLIC
    Code:
      stack=5, locals=3, args_size=3
         0: aload_1
         1: invokestatic  #17                 // Method clojure/lang/Numbers.isZero:(Ljava/lang/Object;)Z
         4: ifeq          14
         7: aload_2
         8: aconst_null
         9: astore_2
        10: goto          42
        13: pop
        14: getstatic     #21                 // Field const__1:Lclojure/lang/Var;
        17: invokevirtual #27                 // Method clojure/lang/Var.getRawRoot:()Ljava/lang/Object;
        20: checkcast     #29                 // class clojure/lang/IFn
        23: aload_1
        24: lconst_1
        25: invokestatic  #33                 // Method clojure/lang/Numbers.minus:(Ljava/lang/Object;J)Ljava/lang/Number;
        28: aload_2
        29: aconst_null
        30: astore_2
        31: aload_1
        32: aconst_null
        33: astore_1
        34: invokestatic  #37                 // Method clojure/lang/Numbers.multiplyP:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Number;
        37: invokeinterface #39,  3           // InterfaceMethod clojure/lang/IFn.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
        42: areturn
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
            0      42     0  this   Ljava/lang/Object;
            0      42     1     n   Ljava/lang/Object;
            0      42     2   acc   Ljava/lang/Object;
      LineNumberTable:
        line 9: 0
        line 10: 0
        line 10: 1
        line 12: 20
        line 12: 25
        line 12: 34
        line 12: 37

  public static {};
    descriptor: ()V
    flags: ACC_PUBLIC, ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: ldc           #46                 // String factorial_norecur
         2: ldc           #48                 // String fact-helper
         4: invokestatic  #54                 // Method clojure/lang/RT.var:(Ljava/lang/String;Ljava/lang/String;)Lclojure/lang/Var;
         7: checkcast     #23                 // class clojure/lang/Var
        10: putstatic     #21                 // Field const__1:Lclojure/lang/Var;
        13: return
      LineNumberTable:
        line 9: 0
}
SourceFile: "factorial_norecur.clj"
SourceDebugExtension:
  SMAP
  factorial_norecur.java
  Clojure
  *S Clojure
  *F
  + 1 factorial_norecur.clj
  factorial_norecur.clj
  *L
  6#1,8:6
  *E
